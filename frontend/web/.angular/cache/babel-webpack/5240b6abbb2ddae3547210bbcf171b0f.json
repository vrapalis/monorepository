{"ast":null,"code":"// Generated by CoffeeScript 2.5.1\n(function () {\n  // This file's name is set up in such a way that it will always show up first in\n  // the list of files given to coffee --join, so that the other files can assume\n  // that XMLHttpRequestEventTarget was already defined.\n  // The DOM EventTarget subclass used by XMLHttpRequest.\n  // @see http://xhr.spec.whatwg.org/#interface-xmlhttprequest\n  var InvalidStateError, NetworkError, ProgressEvent, SecurityError, SyntaxError, XMLHttpRequest, XMLHttpRequestEventTarget, XMLHttpRequestUpload, http, https, os, url;\n\n  XMLHttpRequestEventTarget = function () {\n    class XMLHttpRequestEventTarget {\n      // @private\n      // This is an abstract class and should not be instantiated directly.\n      constructor() {\n        this.onloadstart = null;\n        this.onprogress = null;\n        this.onabort = null;\n        this.onerror = null;\n        this.onload = null;\n        this.ontimeout = null;\n        this.onloadend = null;\n        this._listeners = {};\n      } // Adds a new-style listener for one of the XHR events.\n      // @see http://www.w3.org/TR/XMLHttpRequest/#events\n      // @param {String} eventType an XHR event type, such as 'readystatechange'\n      // @param {function(ProgressEvent)} listener function that will be called when\n      //   the event fires\n      // @return {undefined} undefined\n\n\n      addEventListener(eventType, listener) {\n        var base;\n        eventType = eventType.toLowerCase();\n        (base = this._listeners)[eventType] || (base[eventType] = []);\n\n        this._listeners[eventType].push(listener);\n\n        return void 0;\n      } // Removes an event listener added by calling addEventListener.\n      // @param {String} eventType an XHR event type, such as 'readystatechange'\n      // @param {function(ProgressEvent)} listener the value passed in a previous\n      //   call to addEventListener.\n      // @return {undefined} undefined\n\n\n      removeEventListener(eventType, listener) {\n        var index;\n        eventType = eventType.toLowerCase();\n\n        if (this._listeners[eventType]) {\n          index = this._listeners[eventType].indexOf(listener);\n\n          if (index !== -1) {\n            this._listeners[eventType].splice(index, 1);\n          }\n        }\n\n        return void 0;\n      } // Calls all the listeners for an event.\n      // @param {ProgressEvent} event the event to be dispatched\n      // @return {undefined} undefined\n\n\n      dispatchEvent(event) {\n        var eventType, j, len, listener, listeners;\n        event.currentTarget = event.target = this;\n        eventType = event.type;\n\n        if (listeners = this._listeners[eventType]) {\n          for (j = 0, len = listeners.length; j < len; j++) {\n            listener = listeners[j];\n            listener.call(this, event);\n          }\n        }\n\n        if (listener = this[`on${eventType}`]) {\n          listener.call(this, event);\n        }\n\n        return void 0;\n      }\n\n    }\n\n    ; // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'loadstart' event\n\n    XMLHttpRequestEventTarget.prototype.onloadstart = null; // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'progress' event\n\n    XMLHttpRequestEventTarget.prototype.onprogress = null; // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'abort' event\n\n    XMLHttpRequestEventTarget.prototype.onabort = null; // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'error' event\n\n    XMLHttpRequestEventTarget.prototype.onerror = null; // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'load' event\n\n    XMLHttpRequestEventTarget.prototype.onload = null; // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'timeout' event\n\n    XMLHttpRequestEventTarget.prototype.ontimeout = null; // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'loadend' event\n\n    XMLHttpRequestEventTarget.prototype.onloadend = null;\n    return XMLHttpRequestEventTarget;\n  }.call(this); // This file's name is set up in such a way that it will always show up second\n  // in the list of files given to coffee --join, so it can use the\n  // XMLHttpRequestEventTarget definition and so that the other files can assume\n  // that XMLHttpRequest was already defined.\n\n\n  http = require('http');\n  https = require('https');\n  os = require('os');\n  url = require('url');\n\n  XMLHttpRequest = function () {\n    // The ECMAScript HTTP API.\n    // @see http://www.w3.org/TR/XMLHttpRequest/#introduction\n    class XMLHttpRequest extends XMLHttpRequestEventTarget {\n      // Creates a new request.\n      // @param {Object} options one or more of the options below\n      // @option options {Boolean} anon if true, the request's anonymous flag\n      //   will be set\n      // @see http://www.w3.org/TR/XMLHttpRequest/#constructors\n      // @see http://www.w3.org/TR/XMLHttpRequest/#anonymous-flag\n      constructor(options) {\n        super();\n        this.onreadystatechange = null;\n        this._anonymous = options && options.anon;\n        this.readyState = XMLHttpRequest.UNSENT;\n        this.response = null;\n        this.responseText = '';\n        this.responseType = '';\n        this.responseURL = '';\n        this.status = 0;\n        this.statusText = '';\n        this.timeout = 0;\n        this.upload = new XMLHttpRequestUpload(this);\n        this._method = null; // String\n\n        this._url = null; // Return value of url.parse()\n\n        this._sync = false;\n        this._headers = null; // Object<String, String>\n\n        this._loweredHeaders = null; // Object<lowercase String, String>\n\n        this._mimeOverride = null;\n        this._request = null; // http.ClientRequest\n\n        this._response = null; // http.ClientResponse\n\n        this._responseParts = null; // Array<Buffer, String>\n\n        this._responseHeaders = null; // Object<lowercase String, String>\n\n        this._aborting = null;\n        this._error = null;\n        this._loadedBytes = 0;\n        this._totalBytes = 0;\n        this._lengthComputable = false;\n      } // Sets the XHR's method, URL, synchronous flag, and authentication params.\n      // @param {String} method the HTTP method to be used\n      // @param {String} url the URL that the request will be made to\n      // @param {?Boolean} async if false, the XHR should be processed\n      //   synchronously; true by default\n      // @param {?String} user the user credential to be used in HTTP basic\n      //   authentication\n      // @param {?String} password the password credential to be used in HTTP basic\n      //   authentication\n      // @return {undefined} undefined\n      // @throw {SecurityError} method is not one of the allowed methods\n      // @throw {SyntaxError} urlString is not a valid URL\n      // @throw {Error} the URL contains an unsupported protocol; the supported\n      //   protocols are file, http and https\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-open()-method\n\n\n      open(method, url, async, user, password) {\n        var xhrUrl;\n        method = method.toUpperCase();\n\n        if (method in this._restrictedMethods) {\n          throw new SecurityError(`HTTP method ${method} is not allowed in XHR`);\n        }\n\n        xhrUrl = this._parseUrl(url);\n\n        if (async === void 0) {\n          async = true;\n        }\n\n        switch (this.readyState) {\n          case XMLHttpRequest.UNSENT:\n          case XMLHttpRequest.OPENED:\n          case XMLHttpRequest.DONE:\n            // Nothing to do here.\n            null;\n            break;\n\n          case XMLHttpRequest.HEADERS_RECEIVED:\n          case XMLHttpRequest.LOADING:\n            // TODO(pwnall): terminate abort(), terminate send()\n            null;\n        }\n\n        this._method = method;\n        this._url = xhrUrl;\n        this._sync = !async;\n        this._headers = {};\n        this._loweredHeaders = {};\n        this._mimeOverride = null;\n\n        this._setReadyState(XMLHttpRequest.OPENED);\n\n        this._request = null;\n        this._response = null;\n        this.status = 0;\n        this.statusText = '';\n        this._responseParts = [];\n        this._responseHeaders = null;\n        this._loadedBytes = 0;\n        this._totalBytes = 0;\n        this._lengthComputable = false;\n        return void 0;\n      } // Appends a header to the list of author request headers.\n      // @param {String} name the HTTP header name\n      // @param {String} value the HTTP header value\n      // @return {undefined} undefined\n      // @throw {InvalidStateError} readyState is not OPENED\n      // @throw {SyntaxError} name is not a valid HTTP header name or value is not\n      //   a valid HTTP header value\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader()-method\n\n\n      setRequestHeader(name, value) {\n        var loweredName;\n\n        if (this.readyState !== XMLHttpRequest.OPENED) {\n          throw new InvalidStateError(\"XHR readyState must be OPENED\");\n        }\n\n        loweredName = name.toLowerCase();\n\n        if (this._restrictedHeaders[loweredName] || /^sec\\-/.test(loweredName) || /^proxy-/.test(loweredName)) {\n          console.warn(`Refused to set unsafe header \\\"${name}\\\"`);\n          return void 0;\n        }\n\n        value = value.toString();\n\n        if (loweredName in this._loweredHeaders) {\n          // Combine value with the existing header value.\n          name = this._loweredHeaders[loweredName];\n          this._headers[name] = this._headers[name] + ', ' + value;\n        } else {\n          // New header.\n          this._loweredHeaders[loweredName] = name;\n          this._headers[name] = value;\n        }\n\n        return void 0;\n      } // Initiates the request.\n      // @param {?String, ?ArrayBufferView} data the data to be sent; ignored for\n      //   GET and HEAD requests\n      // @return {undefined} undefined\n      // @throw {InvalidStateError} readyState is not OPENED\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-send()-method\n\n\n      send(data) {\n        if (this.readyState !== XMLHttpRequest.OPENED) {\n          throw new InvalidStateError(\"XHR readyState must be OPENED\");\n        }\n\n        if (this._request) {\n          throw new InvalidStateError(\"send() already called\");\n        }\n\n        switch (this._url.protocol) {\n          case 'file:':\n            this._sendFile(data);\n\n            break;\n\n          case 'http:':\n          case 'https:':\n            this._sendHttp(data);\n\n            break;\n\n          default:\n            throw new NetworkError(`Unsupported protocol ${this._url.protocol}`);\n        }\n\n        return void 0;\n      } // Cancels the network activity performed by this request.\n      // @return {undefined} undefined\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-abort()-method\n\n\n      abort() {\n        if (!this._request) {\n          return;\n        }\n\n        this._request.abort();\n\n        this._setError();\n\n        this._dispatchProgress('abort');\n\n        this._dispatchProgress('loadend');\n\n        return void 0;\n      } // Returns a header value in the HTTP response for this XHR.\n      // @param {String} name case-insensitive HTTP header name\n      // @return {?String} value the value of the header whose name matches the\n      //   given name, or null if there is no such header\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method\n\n\n      getResponseHeader(name) {\n        var loweredName;\n\n        if (!this._responseHeaders) {\n          return null;\n        }\n\n        loweredName = name.toLowerCase();\n\n        if (loweredName in this._responseHeaders) {\n          return this._responseHeaders[loweredName];\n        } else {\n          return null;\n        }\n      } // Returns all the HTTP headers in this XHR's response.\n      // @return {String} header lines separated by CR LF, where each header line\n      //   has the name and value separated by a \": \" (colon, space); the empty\n      //   string is returned if the headers are not available\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders()-method\n\n\n      getAllResponseHeaders() {\n        var lines, name, value;\n\n        if (!this._responseHeaders) {\n          return '';\n        }\n\n        lines = function () {\n          var ref, results;\n          ref = this._responseHeaders;\n          results = [];\n\n          for (name in ref) {\n            value = ref[name];\n            results.push(`${name}: ${value}`);\n          }\n\n          return results;\n        }.call(this);\n\n        return lines.join(\"\\r\\n\");\n      } // Overrides the Content-Type\n      // @return {undefined} undefined\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-overridemimetype()-method\n\n\n      overrideMimeType(newMimeType) {\n        if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {\n          throw new InvalidStateError(\"overrideMimeType() not allowed in LOADING or DONE\");\n        }\n\n        this._mimeOverride = newMimeType.toLowerCase();\n        return void 0;\n      } // Network configuration not exposed in the XHR API.\n      // Although the XMLHttpRequest specification calls itself \"ECMAScript HTTP\",\n      // it assumes that requests are always performed in the context of a browser\n      // application, where some network parameters are set by the browser user and\n      // should not be modified by Web applications. This API provides access to\n      // these network parameters.\n      // NOTE: this is not in the XMLHttpRequest API, and will not work in\n      // browsers.  It is a stable node-xhr2 API.\n      // @param {Object} options one or more of the options below\n      // @option options {?http.Agent} httpAgent the value for the nodejsHttpAgent\n      //   property (the agent used for HTTP requests)\n      // @option options {?https.Agent} httpsAgent the value for the\n      //   nodejsHttpsAgent property (the agent used for HTTPS requests)\n      // @return {undefined} undefined\n\n\n      nodejsSet(options) {\n        var baseUrl, parsedUrl;\n\n        if ('httpAgent' in options) {\n          this.nodejsHttpAgent = options.httpAgent;\n        }\n\n        if ('httpsAgent' in options) {\n          this.nodejsHttpsAgent = options.httpsAgent;\n        }\n\n        if ('baseUrl' in options) {\n          baseUrl = options.baseUrl;\n\n          if (baseUrl !== null) {\n            parsedUrl = url.parse(baseUrl, false, true);\n\n            if (!parsedUrl.protocol) {\n              throw new SyntaxError(\"baseUrl must be an absolute URL\");\n            }\n          }\n\n          this.nodejsBaseUrl = baseUrl;\n        }\n\n        return void 0;\n      } // Default settings for the network configuration not exposed in the XHR API.\n      // NOTE: this is not in the XMLHttpRequest API, and will not work in\n      // browsers.  It is a stable node-xhr2 API.\n      // @param {Object} options one or more of the options below\n      // @option options {?http.Agent} httpAgent the default value for the\n      //   nodejsHttpAgent property (the agent used for HTTP requests)\n      // @option options {https.Agent} httpsAgent the default value for the\n      //   nodejsHttpsAgent property (the agent used for HTTPS requests)\n      // @return {undefined} undefined\n      // @see XMLHttpRequest.nodejsSet\n\n\n      static nodejsSet(options) {\n        // \"this\" will be set to XMLHttpRequest.prototype, so the instance nodejsSet\n        // operates on default property values.\n        XMLHttpRequest.prototype.nodejsSet(options);\n        return void 0;\n      } // Sets the readyState property and fires the readystatechange event.\n      // @private\n      // @param {Number} newReadyState the new value of readyState\n      // @return {undefined} undefined\n\n\n      _setReadyState(newReadyState) {\n        var event;\n        this.readyState = newReadyState;\n        event = new ProgressEvent('readystatechange');\n        this.dispatchEvent(event);\n        return void 0;\n      } // XMLHttpRequest#send() implementation for the file: protocol.\n      // @private\n\n\n      _sendFile() {\n        if (this._url.method !== 'GET') {\n          throw new NetworkError('The file protocol only supports GET');\n        }\n\n        throw new Error(\"Protocol file: not implemented\");\n      } // XMLHttpRequest#send() implementation for the http: and https: protocols.\n      // @private\n      // This method sets the instance variables and calls _sendHxxpRequest(), which\n      // is responsible for building a node.js request and firing it off. The code\n      // in _sendHxxpRequest() is separated off so it can be reused when handling\n      // redirects.\n      // @see http://www.w3.org/TR/XMLHttpRequest/#infrastructure-for-the-send()-method\n\n\n      _sendHttp(data) {\n        if (this._sync) {\n          throw new Error(\"Synchronous XHR processing not implemented\");\n        }\n\n        if (data != null && (this._method === 'GET' || this._method === 'HEAD')) {\n          console.warn(`Discarding entity body for ${this._method} requests`);\n          data = null;\n        } else {\n          // Send Content-Length: 0\n          data || (data = '');\n        } // NOTE: this is called before finalizeHeaders so that the uploader can\n        //       figure out Content-Length and Content-Type.\n\n\n        this.upload._setData(data);\n\n        this._finalizeHeaders();\n\n        this._sendHxxpRequest();\n\n        return void 0;\n      } // Sets up and fires off a HTTP/HTTPS request using the node.js API.\n      // @private\n      // This method contains the bulk of the XMLHttpRequest#send() implementation,\n      // and is also used to issue new HTTP requests when handling HTTP redirects.\n      // @see http://www.w3.org/TR/XMLHttpRequest/#infrastructure-for-the-send()-method\n\n\n      _sendHxxpRequest() {\n        var agent, hxxp, request;\n\n        if (this._url.protocol === 'http:') {\n          hxxp = http;\n          agent = this.nodejsHttpAgent;\n        } else {\n          hxxp = https;\n          agent = this.nodejsHttpsAgent;\n        }\n\n        request = hxxp.request({\n          hostname: this._url.hostname,\n          port: this._url.port,\n          path: this._url.path,\n          auth: this._url.auth,\n          method: this._method,\n          headers: this._headers,\n          agent: agent\n        });\n        this._request = request;\n\n        if (this.timeout) {\n          request.setTimeout(this.timeout, () => {\n            return this._onHttpTimeout(request);\n          });\n        }\n\n        request.on('response', response => {\n          return this._onHttpResponse(request, response);\n        });\n        request.on('error', error => {\n          return this._onHttpRequestError(request, error);\n        });\n\n        this.upload._startUpload(request);\n\n        if (this._request === request) {\n          // An http error might have already fired.\n          this._dispatchProgress('loadstart');\n        }\n\n        return void 0;\n      } // Fills in the restricted HTTP headers with default values.\n      // This is called right before the HTTP request is sent off.\n      // @private\n      // @return {undefined} undefined\n\n\n      _finalizeHeaders() {\n        var base;\n        this._headers['Connection'] = 'keep-alive';\n        this._headers['Host'] = this._url.host;\n\n        if (this._anonymous) {\n          this._headers['Referer'] = 'about:blank';\n        }\n\n        (base = this._headers)['User-Agent'] || (base['User-Agent'] = this._userAgent);\n\n        this.upload._finalizeHeaders(this._headers, this._loweredHeaders);\n\n        return void 0;\n      } // Called when the headers of an HTTP response have been received.\n      // @private\n      // @param {http.ClientRequest} request the node.js ClientRequest instance that\n      //   produced this response\n      // @param {http.ClientResponse} response the node.js ClientResponse instance\n      //   passed to\n\n\n      _onHttpResponse(request, response) {\n        var lengthString;\n\n        if (this._request !== request) {\n          return;\n        } // Transparent redirection handling.\n\n\n        switch (response.statusCode) {\n          case 301:\n          case 302:\n          case 303:\n          case 307:\n          case 308:\n            this._url = this._parseUrl(response.headers['location']);\n            this._method = 'GET';\n\n            if ('content-type' in this._loweredHeaders) {\n              delete this._headers[this._loweredHeaders['content-type']];\n              delete this._loweredHeaders['content-type'];\n            } // XMLHttpRequestUpload#_finalizeHeaders() sets Content-Type directly.\n\n\n            if ('Content-Type' in this._headers) {\n              delete this._headers['Content-Type'];\n            } // Restricted headers can't be set by the user, no need to check\n            // loweredHeaders.\n\n\n            delete this._headers['Content-Length'];\n\n            this.upload._reset();\n\n            this._finalizeHeaders();\n\n            this._sendHxxpRequest();\n\n            return;\n        }\n\n        this._response = response;\n\n        this._response.on('data', data => {\n          return this._onHttpResponseData(response, data);\n        });\n\n        this._response.on('end', () => {\n          return this._onHttpResponseEnd(response);\n        });\n\n        this._response.on('close', () => {\n          return this._onHttpResponseClose(response);\n        });\n\n        this.responseURL = this._url.href.split('#')[0];\n        this.status = this._response.statusCode;\n        this.statusText = http.STATUS_CODES[this.status];\n\n        this._parseResponseHeaders(response);\n\n        if (lengthString = this._responseHeaders['content-length']) {\n          this._totalBytes = parseInt(lengthString);\n          this._lengthComputable = true;\n        } else {\n          this._lengthComputable = false;\n        }\n\n        return this._setReadyState(XMLHttpRequest.HEADERS_RECEIVED);\n      } // Called when some data has been received on a HTTP connection.\n      // @private\n      // @param {http.ClientResponse} response the node.js ClientResponse instance\n      //   that fired this event\n      // @param {String, Buffer} data the data that has been received\n\n\n      _onHttpResponseData(response, data) {\n        if (this._response !== response) {\n          return;\n        }\n\n        this._responseParts.push(data);\n\n        this._loadedBytes += data.length;\n\n        if (this.readyState !== XMLHttpRequest.LOADING) {\n          this._setReadyState(XMLHttpRequest.LOADING);\n        }\n\n        return this._dispatchProgress('progress');\n      } // Called when the HTTP request finished processing.\n      // @private\n      // @param {http.ClientResponse} response the node.js ClientResponse instance\n      //   that fired this event\n\n\n      _onHttpResponseEnd(response) {\n        if (this._response !== response) {\n          return;\n        }\n\n        this._parseResponse();\n\n        this._request = null;\n        this._response = null;\n\n        this._setReadyState(XMLHttpRequest.DONE);\n\n        this._dispatchProgress('load');\n\n        return this._dispatchProgress('loadend');\n      } // Called when the underlying HTTP connection was closed prematurely.\n      // If this method is called, it will be called after or instead of\n      // onHttpResponseEnd.\n      // @private\n      // @param {http.ClientResponse} response the node.js ClientResponse instance\n      //   that fired this event\n\n\n      _onHttpResponseClose(response) {\n        var request;\n\n        if (this._response !== response) {\n          return;\n        }\n\n        request = this._request;\n\n        this._setError();\n\n        request.abort();\n\n        this._setReadyState(XMLHttpRequest.DONE);\n\n        this._dispatchProgress('error');\n\n        return this._dispatchProgress('loadend');\n      } // Called when the timeout set on the HTTP socket expires.\n      // @private\n      // @param {http.ClientRequest} request the node.js ClientRequest instance that\n      //   fired this event\n\n\n      _onHttpTimeout(request) {\n        if (this._request !== request) {\n          return;\n        }\n\n        this._setError();\n\n        request.abort();\n\n        this._setReadyState(XMLHttpRequest.DONE);\n\n        this._dispatchProgress('timeout');\n\n        return this._dispatchProgress('loadend');\n      } // Called when something wrong happens on the HTTP socket\n      // @private\n      // @param {http.ClientRequest} request the node.js ClientRequest instance that\n      //   fired this event\n      // @param {Error} error emitted exception\n\n\n      _onHttpRequestError(request, error) {\n        if (this._request !== request) {\n          return;\n        }\n\n        this._setError();\n\n        request.abort();\n\n        this._setReadyState(XMLHttpRequest.DONE);\n\n        this._dispatchProgress('error');\n\n        return this._dispatchProgress('loadend');\n      } // Fires an XHR progress event.\n      // @private\n      // @param {String} eventType one of the XHR progress event types, such as\n      //   'load' and 'progress'\n\n\n      _dispatchProgress(eventType) {\n        var event;\n        event = new ProgressEvent(eventType);\n        event.lengthComputable = this._lengthComputable;\n        event.loaded = this._loadedBytes;\n        event.total = this._totalBytes;\n        this.dispatchEvent(event);\n        return void 0;\n      } // Sets up the XHR to reflect the fact that an error has occurred.\n      // The possible errors are a network error, a timeout, or an abort.\n      // @private\n\n\n      _setError() {\n        this._request = null;\n        this._response = null;\n        this._responseHeaders = null;\n        this._responseParts = null;\n        return void 0;\n      } // Parses a request URL string.\n      // @private\n      // This method is a thin wrapper around url.parse() that normalizes HTTP\n      // user/password credentials. It is used to parse the URL string passed to\n      // XMLHttpRequest#open() and the URLs in the Location headers of HTTP redirect\n      // responses.\n      // @param {String} urlString the URL to be parsed\n      // @return {Object} parsed URL\n\n\n      _parseUrl(urlString) {\n        var absoluteUrlString, index, password, user, xhrUrl;\n\n        if (this.nodejsBaseUrl === null) {\n          absoluteUrlString = urlString;\n        } else {\n          absoluteUrlString = url.resolve(this.nodejsBaseUrl, urlString);\n        }\n\n        xhrUrl = url.parse(absoluteUrlString, false, true);\n        xhrUrl.hash = null;\n\n        if (xhrUrl.auth && (typeof user !== \"undefined\" && user !== null || typeof password !== \"undefined\" && password !== null)) {\n          index = xhrUrl.auth.indexOf(':');\n\n          if (index === -1) {\n            if (!user) {\n              user = xhrUrl.auth;\n            }\n          } else {\n            if (!user) {\n              user = xhrUrl.substring(0, index);\n            }\n\n            if (!password) {\n              password = xhrUrl.substring(index + 1);\n            }\n          }\n        }\n\n        if (user || password) {\n          xhrUrl.auth = `${user}:${password}`;\n        }\n\n        return xhrUrl;\n      } // Reads the headers from a node.js ClientResponse instance.\n      // @private\n      // @param {http.ClientResponse} response the response whose headers will be\n      //   imported into this XMLHttpRequest's state\n      // @return {undefined} undefined\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders()-method\n\n\n      _parseResponseHeaders(response) {\n        var loweredName, name, ref, value;\n        this._responseHeaders = {};\n        ref = response.headers;\n\n        for (name in ref) {\n          value = ref[name];\n          loweredName = name.toLowerCase();\n\n          if (this._privateHeaders[loweredName]) {\n            continue;\n          }\n\n          if (this._mimeOverride !== null && loweredName === 'content-type') {\n            value = this._mimeOverride;\n          }\n\n          this._responseHeaders[loweredName] = value;\n        }\n\n        if (this._mimeOverride !== null && !('content-type' in this._responseHeaders)) {\n          this._responseHeaders['content-type'] = this._mimeOverride;\n        }\n\n        return void 0;\n      } // Sets the response and responseText properties when an XHR completes.\n      // @private\n      // @return {undefined} undefined\n\n\n      _parseResponse() {\n        var arrayBuffer, buffer, i, j, jsonError, ref, view;\n\n        if (Buffer.concat) {\n          buffer = Buffer.concat(this._responseParts);\n        } else {\n          // node 0.6\n          buffer = this._concatBuffers(this._responseParts);\n        }\n\n        this._responseParts = null;\n\n        switch (this.responseType) {\n          case 'text':\n            this._parseTextResponse(buffer);\n\n            break;\n\n          case 'json':\n            this.responseText = null;\n\n            try {\n              this.response = JSON.parse(buffer.toString('utf-8'));\n            } catch (error1) {\n              jsonError = error1;\n              this.response = null;\n            }\n\n            break;\n\n          case 'buffer':\n            this.responseText = null;\n            this.response = buffer;\n            break;\n\n          case 'arraybuffer':\n            this.responseText = null;\n            arrayBuffer = new ArrayBuffer(buffer.length);\n            view = new Uint8Array(arrayBuffer);\n\n            for (i = j = 0, ref = buffer.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n              view[i] = buffer[i];\n            }\n\n            this.response = arrayBuffer;\n            break;\n\n          default:\n            // TODO(pwnall): content-base detection\n            this._parseTextResponse(buffer);\n\n        }\n\n        return void 0;\n      } // Sets response and responseText for a 'text' response type.\n      // @private\n      // @param {Buffer} buffer the node.js Buffer containing the binary response\n      // @return {undefined} undefined\n\n\n      _parseTextResponse(buffer) {\n        var e;\n\n        try {\n          this.responseText = buffer.toString(this._parseResponseEncoding());\n        } catch (error1) {\n          e = error1; // Unknown encoding.\n\n          this.responseText = buffer.toString('binary');\n        }\n\n        this.response = this.responseText;\n        return void 0;\n      } // Figures out the string encoding of the XHR's response.\n      // This is called to determine the encoding when responseText is set.\n      // @private\n      // @return {String} a string encoding, e.g. 'utf-8'\n\n\n      _parseResponseEncoding() {\n        var contentType, encoding, match;\n        encoding = null;\n\n        if (contentType = this._responseHeaders['content-type']) {\n          if (match = /\\;\\s*charset\\=(.*)$/.exec(contentType)) {\n            return match[1];\n          }\n        }\n\n        return 'utf-8';\n      } // Buffer.concat implementation for node 0.6.\n      // @private\n      // @param {Array<Buffer>} buffers the buffers whose contents will be merged\n      // @return {Buffer} same as Buffer.concat(buffers) in node 0.8 and above\n\n\n      _concatBuffers(buffers) {\n        var buffer, j, k, len, len1, length, target;\n\n        if (buffers.length === 0) {\n          return Buffer.alloc(0);\n        }\n\n        if (buffers.length === 1) {\n          return buffers[0];\n        }\n\n        length = 0;\n\n        for (j = 0, len = buffers.length; j < len; j++) {\n          buffer = buffers[j];\n          length += buffer.length;\n        }\n\n        target = Buffer.alloc(length);\n        length = 0;\n\n        for (k = 0, len1 = buffers.length; k < len1; k++) {\n          buffer = buffers[k];\n          buffer.copy(target, length);\n          length += buffer.length;\n        }\n\n        return target;\n      }\n\n    }\n\n    ; // @property {function(ProgressEvent)} DOM level 0-style handler for the\n    //   'readystatechange' event\n\n    XMLHttpRequest.prototype.onreadystatechange = null; // @property {Number} the current state of the XHR object\n    // @see http://www.w3.org/TR/XMLHttpRequest/#states\n\n    XMLHttpRequest.prototype.readyState = null; // @property {String, ArrayBuffer, Buffer, Object} processed XHR response\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-response-attribute\n\n    XMLHttpRequest.prototype.response = null; // @property {String} response string, if responseType is '' or 'text'\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-responsetext-attribute\n\n    XMLHttpRequest.prototype.responseText = null; // @property {String} sets the parsing method for the XHR response\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-responsetype-attribute\n\n    XMLHttpRequest.prototype.responseType = null; // @property {Number} the HTTP\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-status-attribute\n\n    XMLHttpRequest.prototype.status = null; // @property {Number} milliseconds to wait for the request to complete\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-timeout-attribute\n\n    XMLHttpRequest.prototype.timeout = null; // @property {XMLHttpRequestUpload} the associated upload information\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-upload-attribute\n\n    XMLHttpRequest.prototype.upload = null; // readyState value before XMLHttpRequest#open() is called\n\n    XMLHttpRequest.prototype.UNSENT = 0; // readyState value before XMLHttpRequest#open() is called\n\n    XMLHttpRequest.UNSENT = 0; // readyState value after XMLHttpRequest#open() is called, and before\n    //   XMLHttpRequest#send() is called; XMLHttpRequest#setRequestHeader() can be\n    //   called in this state\n\n    XMLHttpRequest.prototype.OPENED = 1; // readyState value after XMLHttpRequest#open() is called, and before\n    //   XMLHttpRequest#send() is called; XMLHttpRequest#setRequestHeader() can be\n    //   called in this state\n\n    XMLHttpRequest.OPENED = 1; // readyState value after redirects have been followed and the HTTP headers of\n    //   the final response have been received\n\n    XMLHttpRequest.prototype.HEADERS_RECEIVED = 2; // readyState value after redirects have been followed and the HTTP headers of\n    //   the final response have been received\n\n    XMLHttpRequest.HEADERS_RECEIVED = 2; // readyState value when the response entity body is being received\n\n    XMLHttpRequest.prototype.LOADING = 3; // readyState value when the response entity body is being received\n\n    XMLHttpRequest.LOADING = 3; // readyState value after the request has been completely processed\n\n    XMLHttpRequest.prototype.DONE = 4; // readyState value after the request has been completely processed\n\n    XMLHttpRequest.DONE = 4; // @property {http.Agent} the agent option passed to HTTP requests\n    // NOTE: this is not in the XMLHttpRequest API, and will not work in browsers.\n    // It is a stable node-xhr2 API that is useful for testing & going through\n    // web-proxies.\n\n    XMLHttpRequest.prototype.nodejsHttpAgent = http.globalAgent; // @property {https.Agent} the agent option passed to HTTPS requests\n    // NOTE: this is not in the XMLHttpRequest API, and will not work in browsers.\n    // It is a stable node-xhr2 API that is useful for testing & going through\n    // web-proxies.\n\n    XMLHttpRequest.prototype.nodejsHttpsAgent = https.globalAgent; // @property {String} the base URL that relative URLs get resolved to\n    // NOTE: this is not in the XMLHttpRequest API, and will not work in browsers.\n    // Its browser equivalent is the base URL of the document associated with the\n    // Window object. It is a stable node-xhr2 API provided for libraries such as\n    // Angular Universal.\n\n    XMLHttpRequest.prototype.nodejsBaseUrl = null; // HTTP methods that are disallowed in the XHR spec.\n    // @private\n    // @see Step 6 in http://www.w3.org/TR/XMLHttpRequest/#the-open()-method\n\n    XMLHttpRequest.prototype._restrictedMethods = {\n      CONNECT: true,\n      TRACE: true,\n      TRACK: true\n    }; // HTTP request headers that are disallowed in the XHR spec.\n    // @private\n    // @see Step 5 in\n    //   http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader()-method\n\n    XMLHttpRequest.prototype._restrictedHeaders = {\n      'accept-charset': true,\n      'accept-encoding': true,\n      'access-control-request-headers': true,\n      'access-control-request-method': true,\n      connection: true,\n      'content-length': true,\n      cookie: true,\n      cookie2: true,\n      date: true,\n      dnt: true,\n      expect: true,\n      host: true,\n      'keep-alive': true,\n      origin: true,\n      referer: true,\n      te: true,\n      trailer: true,\n      'transfer-encoding': true,\n      upgrade: true,\n      via: true\n    }; // HTTP response headers that should not be exposed according to the XHR spec.\n    // @private\n    // @see Step 3 in\n    //     http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method\n\n    XMLHttpRequest.prototype._privateHeaders = {\n      'set-cookie': true,\n      'set-cookie2': true\n    }; // The default value of the User-Agent header.\n\n    XMLHttpRequest.prototype._userAgent = `Mozilla/5.0 (${os.type()} ${os.arch()}) ` + `node.js/${process.versions.node} v8/${process.versions.v8}`;\n    return XMLHttpRequest;\n  }.call(this); // XMLHttpRequest is the result of require('node-xhr2').\n\n\n  module.exports = XMLHttpRequest; // Make node-xhr2 work as a drop-in replacement for libraries that promote the\n  // following usage pattern:\n  //     var XMLHttpRequest = require('xhr-library-name').XMLHttpRequest\n\n  XMLHttpRequest.XMLHttpRequest = XMLHttpRequest; // This file defines the custom errors used in the XMLHttpRequest specification.\n  // Thrown if the XHR security policy is violated.\n\n  SecurityError = class SecurityError extends Error {\n    // @private\n    constructor() {\n      super();\n    }\n\n  }; // Thrown if the XHR security policy is violated.\n\n  XMLHttpRequest.SecurityError = SecurityError; // Usually thrown if the XHR is in the wrong readyState for an operation.\n\n  InvalidStateError = class InvalidStateError extends Error {\n    // @private\n    constructor() {\n      super();\n    }\n\n  }; // Usually thrown if the XHR is in the wrong readyState for an operation.\n\n  InvalidStateError = class InvalidStateError extends Error {};\n  XMLHttpRequest.InvalidStateError = InvalidStateError; // Thrown if there is a problem with the URL passed to the XHR.\n\n  NetworkError = class NetworkError extends Error {\n    // @private\n    constructor() {\n      super();\n    }\n\n  }; // Thrown if parsing URLs errors out.\n\n  XMLHttpRequest.SyntaxError = SyntaxError;\n  SyntaxError = class SyntaxError extends Error {\n    // @private:\n    constructor() {\n      super();\n    }\n\n  };\n\n  ProgressEvent = function () {\n    // http://xhr.spec.whatwg.org/#interface-progressevent\n    class ProgressEvent {\n      // Creates a new event.\n      // @param {String} type the event type, e.g. 'readystatechange'; must be\n      //   lowercased\n      constructor(type) {\n        this.type = type;\n        this.target = null;\n        this.currentTarget = null;\n        this.lengthComputable = false;\n        this.loaded = 0;\n        this.total = 0;\n      }\n\n    }\n\n    ; // Getting the time from the OS is expensive, skip on that for now.\n    // @timeStamp = Date.now()\n    // @property {Boolean} for compatibility with DOM events\n\n    ProgressEvent.prototype.bubbles = false; // @property {Boolean} for fompatibility with DOM events\n\n    ProgressEvent.prototype.cancelable = false; // @property {XMLHttpRequest} the request that caused this event\n\n    ProgressEvent.prototype.target = null; // @property {Number} number of bytes that have already been downloaded or\n    //   uploaded\n\n    ProgressEvent.prototype.loaded = null; // @property {Boolean} true if the Content-Length response header is available\n    //   and the value of the event's total property is meaningful\n\n    ProgressEvent.prototype.lengthComputable = null; // @property {Number} number of bytes that will be downloaded or uploaded by\n    //   the request that fired the event\n\n    ProgressEvent.prototype.total = null;\n    return ProgressEvent;\n  }.call(this); // The XHR spec exports the ProgressEvent constructor.\n\n\n  XMLHttpRequest.ProgressEvent = ProgressEvent; // @see http://xhr.spec.whatwg.org/#interface-xmlhttprequest\n\n  XMLHttpRequestUpload = class XMLHttpRequestUpload extends XMLHttpRequestEventTarget {\n    // @private\n    // @param {XMLHttpRequest} the XMLHttpRequest that this upload object is\n    //   associated with\n    constructor(request) {\n      super();\n      this._request = request;\n\n      this._reset();\n    } // Sets up this Upload to handle a new request.\n    // @private\n    // @return {undefined} undefined\n\n\n    _reset() {\n      this._contentType = null;\n      this._body = null;\n      return void 0;\n    } // Implements the upload-related part of the send() XHR specification.\n    // @private\n    // @param {?String, ?Buffer, ?ArrayBufferView} data the argument passed to\n    //   XMLHttpRequest#send()\n    // @return {undefined} undefined\n    // @see step 4 of http://www.w3.org/TR/XMLHttpRequest/#the-send()-method\n\n\n    _setData(data) {\n      var body, i, j, k, offset, ref, ref1, view;\n\n      if (typeof data === 'undefined' || data === null) {\n        return;\n      }\n\n      if (typeof data === 'string') {\n        // DOMString\n        if (data.length !== 0) {\n          this._contentType = 'text/plain;charset=UTF-8';\n        }\n\n        this._body = Buffer.from(data, 'utf8');\n      } else if (Buffer.isBuffer(data)) {\n        // node.js Buffer\n        this._body = data;\n      } else if (data instanceof ArrayBuffer) {\n        // ArrayBuffer arguments were supported in an old revision of the spec.\n        body = Buffer.alloc(data.byteLength);\n        view = new Uint8Array(data);\n\n        for (i = j = 0, ref = data.byteLength; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n          body[i] = view[i];\n        }\n\n        this._body = body;\n      } else if (data.buffer && data.buffer instanceof ArrayBuffer) {\n        // ArrayBufferView\n        body = Buffer.alloc(data.byteLength);\n        offset = data.byteOffset;\n        view = new Uint8Array(data.buffer);\n\n        for (i = k = 0, ref1 = data.byteLength; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {\n          body[i] = view[i + offset];\n        }\n\n        this._body = body;\n      } else {\n        // NOTE: diverging from the XHR specification of coercing everything else\n        //       to Strings via toString() because that behavior masks bugs and is\n        //       rarely useful\n        throw new Error(`Unsupported send() data ${data}`);\n      }\n\n      return void 0;\n    } // Updates the HTTP headers right before the request is sent.\n    // This is used to set data-dependent headers such as Content-Length and\n    // Content-Type.\n    // @private\n    // @param {Object<String, String>} headers the HTTP headers to be sent\n    // @param {Object<String, String>} loweredHeaders maps lowercased HTTP header\n    //   names (e.g., 'content-type') to the actual names used in the headers\n    //   parameter (e.g., 'Content-Type')\n    // @return {undefined} undefined\n\n\n    _finalizeHeaders(headers, loweredHeaders) {\n      if (this._contentType) {\n        if (!('content-type' in loweredHeaders)) {\n          headers['Content-Type'] = this._contentType;\n        }\n      }\n\n      if (this._body) {\n        // Restricted headers can't be set by the user, no need to check\n        // loweredHeaders.\n        headers['Content-Length'] = this._body.length.toString();\n      }\n\n      return void 0;\n    } // Starts sending the HTTP request data.\n    // @private\n    // @param {http.ClientRequest} request the HTTP request\n    // @return {undefined} undefined\n\n\n    _startUpload(request) {\n      if (this._body) {\n        request.write(this._body);\n      }\n\n      request.end();\n      return void 0;\n    }\n\n  }; // Export the XMLHttpRequestUpload constructor.\n\n  XMLHttpRequest.XMLHttpRequestUpload = XMLHttpRequestUpload;\n}).call(this);","map":{"version":3,"sources":["/home/vitali/Workspace/vrapalis/monorepository/frontend/web/node_modules/xhr2/lib/xhr2.js"],"names":["InvalidStateError","NetworkError","ProgressEvent","SecurityError","SyntaxError","XMLHttpRequest","XMLHttpRequestEventTarget","XMLHttpRequestUpload","http","https","os","url","constructor","onloadstart","onprogress","onabort","onerror","onload","ontimeout","onloadend","_listeners","addEventListener","eventType","listener","base","toLowerCase","push","removeEventListener","index","indexOf","splice","dispatchEvent","event","j","len","listeners","currentTarget","target","type","length","call","prototype","require","options","onreadystatechange","_anonymous","anon","readyState","UNSENT","response","responseText","responseType","responseURL","status","statusText","timeout","upload","_method","_url","_sync","_headers","_loweredHeaders","_mimeOverride","_request","_response","_responseParts","_responseHeaders","_aborting","_error","_loadedBytes","_totalBytes","_lengthComputable","open","method","async","user","password","xhrUrl","toUpperCase","_restrictedMethods","_parseUrl","OPENED","DONE","HEADERS_RECEIVED","LOADING","_setReadyState","setRequestHeader","name","value","loweredName","_restrictedHeaders","test","console","warn","toString","send","data","protocol","_sendFile","_sendHttp","abort","_setError","_dispatchProgress","getResponseHeader","getAllResponseHeaders","lines","ref","results","join","overrideMimeType","newMimeType","nodejsSet","baseUrl","parsedUrl","nodejsHttpAgent","httpAgent","nodejsHttpsAgent","httpsAgent","parse","nodejsBaseUrl","newReadyState","Error","_setData","_finalizeHeaders","_sendHxxpRequest","agent","hxxp","request","hostname","port","path","auth","headers","setTimeout","_onHttpTimeout","on","_onHttpResponse","error","_onHttpRequestError","_startUpload","host","_userAgent","lengthString","statusCode","_reset","_onHttpResponseData","_onHttpResponseEnd","_onHttpResponseClose","href","split","STATUS_CODES","_parseResponseHeaders","parseInt","_parseResponse","lengthComputable","loaded","total","urlString","absoluteUrlString","resolve","hash","substring","_privateHeaders","arrayBuffer","buffer","i","jsonError","view","Buffer","concat","_concatBuffers","_parseTextResponse","JSON","error1","ArrayBuffer","Uint8Array","e","_parseResponseEncoding","contentType","encoding","match","exec","buffers","k","len1","alloc","copy","globalAgent","CONNECT","TRACE","TRACK","connection","cookie","cookie2","date","dnt","expect","origin","referer","te","trailer","upgrade","via","arch","process","versions","node","v8","module","exports","bubbles","cancelable","_contentType","_body","body","offset","ref1","from","isBuffer","byteLength","byteOffset","loweredHeaders","write","end"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 2.5.1\n(function() {\n  // This file's name is set up in such a way that it will always show up first in\n  // the list of files given to coffee --join, so that the other files can assume\n  // that XMLHttpRequestEventTarget was already defined.\n\n  // The DOM EventTarget subclass used by XMLHttpRequest.\n\n  // @see http://xhr.spec.whatwg.org/#interface-xmlhttprequest\n  var InvalidStateError, NetworkError, ProgressEvent, SecurityError, SyntaxError, XMLHttpRequest, XMLHttpRequestEventTarget, XMLHttpRequestUpload, http, https, os, url;\n\n  XMLHttpRequestEventTarget = (function() {\n    class XMLHttpRequestEventTarget {\n      // @private\n      // This is an abstract class and should not be instantiated directly.\n      constructor() {\n        this.onloadstart = null;\n        this.onprogress = null;\n        this.onabort = null;\n        this.onerror = null;\n        this.onload = null;\n        this.ontimeout = null;\n        this.onloadend = null;\n        this._listeners = {};\n      }\n\n      // Adds a new-style listener for one of the XHR events.\n\n      // @see http://www.w3.org/TR/XMLHttpRequest/#events\n\n      // @param {String} eventType an XHR event type, such as 'readystatechange'\n      // @param {function(ProgressEvent)} listener function that will be called when\n      //   the event fires\n      // @return {undefined} undefined\n      addEventListener(eventType, listener) {\n        var base;\n        eventType = eventType.toLowerCase();\n        (base = this._listeners)[eventType] || (base[eventType] = []);\n        this._listeners[eventType].push(listener);\n        return void 0;\n      }\n\n      // Removes an event listener added by calling addEventListener.\n\n      // @param {String} eventType an XHR event type, such as 'readystatechange'\n      // @param {function(ProgressEvent)} listener the value passed in a previous\n      //   call to addEventListener.\n      // @return {undefined} undefined\n      removeEventListener(eventType, listener) {\n        var index;\n        eventType = eventType.toLowerCase();\n        if (this._listeners[eventType]) {\n          index = this._listeners[eventType].indexOf(listener);\n          if (index !== -1) {\n            this._listeners[eventType].splice(index, 1);\n          }\n        }\n        return void 0;\n      }\n\n      // Calls all the listeners for an event.\n\n      // @param {ProgressEvent} event the event to be dispatched\n      // @return {undefined} undefined\n      dispatchEvent(event) {\n        var eventType, j, len, listener, listeners;\n        event.currentTarget = event.target = this;\n        eventType = event.type;\n        if (listeners = this._listeners[eventType]) {\n          for (j = 0, len = listeners.length; j < len; j++) {\n            listener = listeners[j];\n            listener.call(this, event);\n          }\n        }\n        if (listener = this[`on${eventType}`]) {\n          listener.call(this, event);\n        }\n        return void 0;\n      }\n\n    };\n\n    // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'loadstart' event\n    XMLHttpRequestEventTarget.prototype.onloadstart = null;\n\n    // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'progress' event\n    XMLHttpRequestEventTarget.prototype.onprogress = null;\n\n    // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'abort' event\n    XMLHttpRequestEventTarget.prototype.onabort = null;\n\n    // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'error' event\n    XMLHttpRequestEventTarget.prototype.onerror = null;\n\n    // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'load' event\n    XMLHttpRequestEventTarget.prototype.onload = null;\n\n    // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'timeout' event\n    XMLHttpRequestEventTarget.prototype.ontimeout = null;\n\n    // @property {function(ProgressEvent)} DOM level 0-style handler\n    //   for the 'loadend' event\n    XMLHttpRequestEventTarget.prototype.onloadend = null;\n\n    return XMLHttpRequestEventTarget;\n\n  }).call(this);\n\n  // This file's name is set up in such a way that it will always show up second\n  // in the list of files given to coffee --join, so it can use the\n  // XMLHttpRequestEventTarget definition and so that the other files can assume\n  // that XMLHttpRequest was already defined.\n  http = require('http');\n\n  https = require('https');\n\n  os = require('os');\n\n  url = require('url');\n\n  XMLHttpRequest = (function() {\n    // The ECMAScript HTTP API.\n\n    // @see http://www.w3.org/TR/XMLHttpRequest/#introduction\n    class XMLHttpRequest extends XMLHttpRequestEventTarget {\n      // Creates a new request.\n\n      // @param {Object} options one or more of the options below\n      // @option options {Boolean} anon if true, the request's anonymous flag\n      //   will be set\n      // @see http://www.w3.org/TR/XMLHttpRequest/#constructors\n      // @see http://www.w3.org/TR/XMLHttpRequest/#anonymous-flag\n      constructor(options) {\n        super();\n        this.onreadystatechange = null;\n        this._anonymous = options && options.anon;\n        this.readyState = XMLHttpRequest.UNSENT;\n        this.response = null;\n        this.responseText = '';\n        this.responseType = '';\n        this.responseURL = '';\n        this.status = 0;\n        this.statusText = '';\n        this.timeout = 0;\n        this.upload = new XMLHttpRequestUpload(this);\n        this._method = null; // String\n        this._url = null; // Return value of url.parse()\n        this._sync = false;\n        this._headers = null; // Object<String, String>\n        this._loweredHeaders = null; // Object<lowercase String, String>\n        this._mimeOverride = null;\n        this._request = null; // http.ClientRequest\n        this._response = null; // http.ClientResponse\n        this._responseParts = null; // Array<Buffer, String>\n        this._responseHeaders = null; // Object<lowercase String, String>\n        this._aborting = null;\n        this._error = null;\n        this._loadedBytes = 0;\n        this._totalBytes = 0;\n        this._lengthComputable = false;\n      }\n\n      // Sets the XHR's method, URL, synchronous flag, and authentication params.\n\n      // @param {String} method the HTTP method to be used\n      // @param {String} url the URL that the request will be made to\n      // @param {?Boolean} async if false, the XHR should be processed\n      //   synchronously; true by default\n      // @param {?String} user the user credential to be used in HTTP basic\n      //   authentication\n      // @param {?String} password the password credential to be used in HTTP basic\n      //   authentication\n      // @return {undefined} undefined\n      // @throw {SecurityError} method is not one of the allowed methods\n      // @throw {SyntaxError} urlString is not a valid URL\n      // @throw {Error} the URL contains an unsupported protocol; the supported\n      //   protocols are file, http and https\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-open()-method\n      open(method, url, async, user, password) {\n        var xhrUrl;\n        method = method.toUpperCase();\n        if (method in this._restrictedMethods) {\n          throw new SecurityError(`HTTP method ${method} is not allowed in XHR`);\n        }\n        xhrUrl = this._parseUrl(url);\n        if (async === void 0) {\n          async = true;\n        }\n        switch (this.readyState) {\n          case XMLHttpRequest.UNSENT:\n          case XMLHttpRequest.OPENED:\n          case XMLHttpRequest.DONE:\n            // Nothing to do here.\n            null;\n            break;\n          case XMLHttpRequest.HEADERS_RECEIVED:\n          case XMLHttpRequest.LOADING:\n            // TODO(pwnall): terminate abort(), terminate send()\n            null;\n        }\n        this._method = method;\n        this._url = xhrUrl;\n        this._sync = !async;\n        this._headers = {};\n        this._loweredHeaders = {};\n        this._mimeOverride = null;\n        this._setReadyState(XMLHttpRequest.OPENED);\n        this._request = null;\n        this._response = null;\n        this.status = 0;\n        this.statusText = '';\n        this._responseParts = [];\n        this._responseHeaders = null;\n        this._loadedBytes = 0;\n        this._totalBytes = 0;\n        this._lengthComputable = false;\n        return void 0;\n      }\n\n      // Appends a header to the list of author request headers.\n\n      // @param {String} name the HTTP header name\n      // @param {String} value the HTTP header value\n      // @return {undefined} undefined\n      // @throw {InvalidStateError} readyState is not OPENED\n      // @throw {SyntaxError} name is not a valid HTTP header name or value is not\n      //   a valid HTTP header value\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader()-method\n      setRequestHeader(name, value) {\n        var loweredName;\n        if (this.readyState !== XMLHttpRequest.OPENED) {\n          throw new InvalidStateError(\"XHR readyState must be OPENED\");\n        }\n        loweredName = name.toLowerCase();\n        if (this._restrictedHeaders[loweredName] || /^sec\\-/.test(loweredName) || /^proxy-/.test(loweredName)) {\n          console.warn(`Refused to set unsafe header \\\"${name}\\\"`);\n          return void 0;\n        }\n        value = value.toString();\n        if (loweredName in this._loweredHeaders) {\n          // Combine value with the existing header value.\n          name = this._loweredHeaders[loweredName];\n          this._headers[name] = this._headers[name] + ', ' + value;\n        } else {\n          // New header.\n          this._loweredHeaders[loweredName] = name;\n          this._headers[name] = value;\n        }\n        return void 0;\n      }\n\n      // Initiates the request.\n\n      // @param {?String, ?ArrayBufferView} data the data to be sent; ignored for\n      //   GET and HEAD requests\n      // @return {undefined} undefined\n      // @throw {InvalidStateError} readyState is not OPENED\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-send()-method\n      send(data) {\n        if (this.readyState !== XMLHttpRequest.OPENED) {\n          throw new InvalidStateError(\"XHR readyState must be OPENED\");\n        }\n        if (this._request) {\n          throw new InvalidStateError(\"send() already called\");\n        }\n        switch (this._url.protocol) {\n          case 'file:':\n            this._sendFile(data);\n            break;\n          case 'http:':\n          case 'https:':\n            this._sendHttp(data);\n            break;\n          default:\n            throw new NetworkError(`Unsupported protocol ${this._url.protocol}`);\n        }\n        return void 0;\n      }\n\n      // Cancels the network activity performed by this request.\n\n      // @return {undefined} undefined\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-abort()-method\n      abort() {\n        if (!this._request) {\n          return;\n        }\n        this._request.abort();\n        this._setError();\n        this._dispatchProgress('abort');\n        this._dispatchProgress('loadend');\n        return void 0;\n      }\n\n      // Returns a header value in the HTTP response for this XHR.\n\n      // @param {String} name case-insensitive HTTP header name\n      // @return {?String} value the value of the header whose name matches the\n      //   given name, or null if there is no such header\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method\n      getResponseHeader(name) {\n        var loweredName;\n        if (!this._responseHeaders) {\n          return null;\n        }\n        loweredName = name.toLowerCase();\n        if (loweredName in this._responseHeaders) {\n          return this._responseHeaders[loweredName];\n        } else {\n          return null;\n        }\n      }\n\n      // Returns all the HTTP headers in this XHR's response.\n\n      // @return {String} header lines separated by CR LF, where each header line\n      //   has the name and value separated by a \": \" (colon, space); the empty\n      //   string is returned if the headers are not available\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders()-method\n      getAllResponseHeaders() {\n        var lines, name, value;\n        if (!this._responseHeaders) {\n          return '';\n        }\n        lines = (function() {\n          var ref, results;\n          ref = this._responseHeaders;\n          results = [];\n          for (name in ref) {\n            value = ref[name];\n            results.push(`${name}: ${value}`);\n          }\n          return results;\n        }).call(this);\n        return lines.join(\"\\r\\n\");\n      }\n\n      // Overrides the Content-Type\n\n      // @return {undefined} undefined\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-overridemimetype()-method\n      overrideMimeType(newMimeType) {\n        if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {\n          throw new InvalidStateError(\"overrideMimeType() not allowed in LOADING or DONE\");\n        }\n        this._mimeOverride = newMimeType.toLowerCase();\n        return void 0;\n      }\n\n      // Network configuration not exposed in the XHR API.\n\n      // Although the XMLHttpRequest specification calls itself \"ECMAScript HTTP\",\n      // it assumes that requests are always performed in the context of a browser\n      // application, where some network parameters are set by the browser user and\n      // should not be modified by Web applications. This API provides access to\n      // these network parameters.\n\n      // NOTE: this is not in the XMLHttpRequest API, and will not work in\n      // browsers.  It is a stable node-xhr2 API.\n\n      // @param {Object} options one or more of the options below\n      // @option options {?http.Agent} httpAgent the value for the nodejsHttpAgent\n      //   property (the agent used for HTTP requests)\n      // @option options {?https.Agent} httpsAgent the value for the\n      //   nodejsHttpsAgent property (the agent used for HTTPS requests)\n      // @return {undefined} undefined\n      nodejsSet(options) {\n        var baseUrl, parsedUrl;\n        if ('httpAgent' in options) {\n          this.nodejsHttpAgent = options.httpAgent;\n        }\n        if ('httpsAgent' in options) {\n          this.nodejsHttpsAgent = options.httpsAgent;\n        }\n        if ('baseUrl' in options) {\n          baseUrl = options.baseUrl;\n          if (baseUrl !== null) {\n            parsedUrl = url.parse(baseUrl, false, true);\n            if (!parsedUrl.protocol) {\n              throw new SyntaxError(\"baseUrl must be an absolute URL\");\n            }\n          }\n          this.nodejsBaseUrl = baseUrl;\n        }\n        return void 0;\n      }\n\n      // Default settings for the network configuration not exposed in the XHR API.\n\n      // NOTE: this is not in the XMLHttpRequest API, and will not work in\n      // browsers.  It is a stable node-xhr2 API.\n\n      // @param {Object} options one or more of the options below\n      // @option options {?http.Agent} httpAgent the default value for the\n      //   nodejsHttpAgent property (the agent used for HTTP requests)\n      // @option options {https.Agent} httpsAgent the default value for the\n      //   nodejsHttpsAgent property (the agent used for HTTPS requests)\n      // @return {undefined} undefined\n      // @see XMLHttpRequest.nodejsSet\n      static nodejsSet(options) {\n        // \"this\" will be set to XMLHttpRequest.prototype, so the instance nodejsSet\n        // operates on default property values.\n        XMLHttpRequest.prototype.nodejsSet(options);\n        return void 0;\n      }\n\n      // Sets the readyState property and fires the readystatechange event.\n\n      // @private\n      // @param {Number} newReadyState the new value of readyState\n      // @return {undefined} undefined\n      _setReadyState(newReadyState) {\n        var event;\n        this.readyState = newReadyState;\n        event = new ProgressEvent('readystatechange');\n        this.dispatchEvent(event);\n        return void 0;\n      }\n\n      // XMLHttpRequest#send() implementation for the file: protocol.\n\n      // @private\n      _sendFile() {\n        if (this._url.method !== 'GET') {\n          throw new NetworkError('The file protocol only supports GET');\n        }\n        throw new Error(\"Protocol file: not implemented\");\n      }\n\n      // XMLHttpRequest#send() implementation for the http: and https: protocols.\n\n      // @private\n      // This method sets the instance variables and calls _sendHxxpRequest(), which\n      // is responsible for building a node.js request and firing it off. The code\n      // in _sendHxxpRequest() is separated off so it can be reused when handling\n      // redirects.\n\n      // @see http://www.w3.org/TR/XMLHttpRequest/#infrastructure-for-the-send()-method\n      _sendHttp(data) {\n        if (this._sync) {\n          throw new Error(\"Synchronous XHR processing not implemented\");\n        }\n        if ((data != null) && (this._method === 'GET' || this._method === 'HEAD')) {\n          console.warn(`Discarding entity body for ${this._method} requests`);\n          data = null;\n        } else {\n          // Send Content-Length: 0\n          data || (data = '');\n        }\n        // NOTE: this is called before finalizeHeaders so that the uploader can\n        //       figure out Content-Length and Content-Type.\n        this.upload._setData(data);\n        this._finalizeHeaders();\n        this._sendHxxpRequest();\n        return void 0;\n      }\n\n      // Sets up and fires off a HTTP/HTTPS request using the node.js API.\n\n      // @private\n      // This method contains the bulk of the XMLHttpRequest#send() implementation,\n      // and is also used to issue new HTTP requests when handling HTTP redirects.\n\n      // @see http://www.w3.org/TR/XMLHttpRequest/#infrastructure-for-the-send()-method\n      _sendHxxpRequest() {\n        var agent, hxxp, request;\n        if (this._url.protocol === 'http:') {\n          hxxp = http;\n          agent = this.nodejsHttpAgent;\n        } else {\n          hxxp = https;\n          agent = this.nodejsHttpsAgent;\n        }\n        request = hxxp.request({\n          hostname: this._url.hostname,\n          port: this._url.port,\n          path: this._url.path,\n          auth: this._url.auth,\n          method: this._method,\n          headers: this._headers,\n          agent: agent\n        });\n        this._request = request;\n        if (this.timeout) {\n          request.setTimeout(this.timeout, () => {\n            return this._onHttpTimeout(request);\n          });\n        }\n        request.on('response', (response) => {\n          return this._onHttpResponse(request, response);\n        });\n        request.on('error', (error) => {\n          return this._onHttpRequestError(request, error);\n        });\n        this.upload._startUpload(request);\n        if (this._request === request) { // An http error might have already fired.\n          this._dispatchProgress('loadstart');\n        }\n        return void 0;\n      }\n\n      // Fills in the restricted HTTP headers with default values.\n\n      // This is called right before the HTTP request is sent off.\n\n      // @private\n      // @return {undefined} undefined\n      _finalizeHeaders() {\n        var base;\n        this._headers['Connection'] = 'keep-alive';\n        this._headers['Host'] = this._url.host;\n        if (this._anonymous) {\n          this._headers['Referer'] = 'about:blank';\n        }\n        (base = this._headers)['User-Agent'] || (base['User-Agent'] = this._userAgent);\n        this.upload._finalizeHeaders(this._headers, this._loweredHeaders);\n        return void 0;\n      }\n\n      // Called when the headers of an HTTP response have been received.\n\n      // @private\n      // @param {http.ClientRequest} request the node.js ClientRequest instance that\n      //   produced this response\n      // @param {http.ClientResponse} response the node.js ClientResponse instance\n      //   passed to\n      _onHttpResponse(request, response) {\n        var lengthString;\n        if (this._request !== request) {\n          return;\n        }\n        // Transparent redirection handling.\n        switch (response.statusCode) {\n          case 301:\n          case 302:\n          case 303:\n          case 307:\n          case 308:\n            this._url = this._parseUrl(response.headers['location']);\n            this._method = 'GET';\n            if ('content-type' in this._loweredHeaders) {\n              delete this._headers[this._loweredHeaders['content-type']];\n              delete this._loweredHeaders['content-type'];\n            }\n            // XMLHttpRequestUpload#_finalizeHeaders() sets Content-Type directly.\n            if ('Content-Type' in this._headers) {\n              delete this._headers['Content-Type'];\n            }\n            // Restricted headers can't be set by the user, no need to check\n            // loweredHeaders.\n            delete this._headers['Content-Length'];\n            this.upload._reset();\n            this._finalizeHeaders();\n            this._sendHxxpRequest();\n            return;\n        }\n        this._response = response;\n        this._response.on('data', (data) => {\n          return this._onHttpResponseData(response, data);\n        });\n        this._response.on('end', () => {\n          return this._onHttpResponseEnd(response);\n        });\n        this._response.on('close', () => {\n          return this._onHttpResponseClose(response);\n        });\n        this.responseURL = this._url.href.split('#')[0];\n        this.status = this._response.statusCode;\n        this.statusText = http.STATUS_CODES[this.status];\n        this._parseResponseHeaders(response);\n        if (lengthString = this._responseHeaders['content-length']) {\n          this._totalBytes = parseInt(lengthString);\n          this._lengthComputable = true;\n        } else {\n          this._lengthComputable = false;\n        }\n        return this._setReadyState(XMLHttpRequest.HEADERS_RECEIVED);\n      }\n\n      // Called when some data has been received on a HTTP connection.\n\n      // @private\n      // @param {http.ClientResponse} response the node.js ClientResponse instance\n      //   that fired this event\n      // @param {String, Buffer} data the data that has been received\n      _onHttpResponseData(response, data) {\n        if (this._response !== response) {\n          return;\n        }\n        this._responseParts.push(data);\n        this._loadedBytes += data.length;\n        if (this.readyState !== XMLHttpRequest.LOADING) {\n          this._setReadyState(XMLHttpRequest.LOADING);\n        }\n        return this._dispatchProgress('progress');\n      }\n\n      // Called when the HTTP request finished processing.\n\n      // @private\n      // @param {http.ClientResponse} response the node.js ClientResponse instance\n      //   that fired this event\n      _onHttpResponseEnd(response) {\n        if (this._response !== response) {\n          return;\n        }\n        this._parseResponse();\n        this._request = null;\n        this._response = null;\n        this._setReadyState(XMLHttpRequest.DONE);\n        this._dispatchProgress('load');\n        return this._dispatchProgress('loadend');\n      }\n\n      // Called when the underlying HTTP connection was closed prematurely.\n\n      // If this method is called, it will be called after or instead of\n      // onHttpResponseEnd.\n\n      // @private\n      // @param {http.ClientResponse} response the node.js ClientResponse instance\n      //   that fired this event\n      _onHttpResponseClose(response) {\n        var request;\n        if (this._response !== response) {\n          return;\n        }\n        request = this._request;\n        this._setError();\n        request.abort();\n        this._setReadyState(XMLHttpRequest.DONE);\n        this._dispatchProgress('error');\n        return this._dispatchProgress('loadend');\n      }\n\n      // Called when the timeout set on the HTTP socket expires.\n\n      // @private\n      // @param {http.ClientRequest} request the node.js ClientRequest instance that\n      //   fired this event\n      _onHttpTimeout(request) {\n        if (this._request !== request) {\n          return;\n        }\n        this._setError();\n        request.abort();\n        this._setReadyState(XMLHttpRequest.DONE);\n        this._dispatchProgress('timeout');\n        return this._dispatchProgress('loadend');\n      }\n\n      // Called when something wrong happens on the HTTP socket\n\n      // @private\n      // @param {http.ClientRequest} request the node.js ClientRequest instance that\n      //   fired this event\n      // @param {Error} error emitted exception\n      _onHttpRequestError(request, error) {\n        if (this._request !== request) {\n          return;\n        }\n        this._setError();\n        request.abort();\n        this._setReadyState(XMLHttpRequest.DONE);\n        this._dispatchProgress('error');\n        return this._dispatchProgress('loadend');\n      }\n\n      // Fires an XHR progress event.\n\n      // @private\n      // @param {String} eventType one of the XHR progress event types, such as\n      //   'load' and 'progress'\n      _dispatchProgress(eventType) {\n        var event;\n        event = new ProgressEvent(eventType);\n        event.lengthComputable = this._lengthComputable;\n        event.loaded = this._loadedBytes;\n        event.total = this._totalBytes;\n        this.dispatchEvent(event);\n        return void 0;\n      }\n\n      // Sets up the XHR to reflect the fact that an error has occurred.\n\n      // The possible errors are a network error, a timeout, or an abort.\n\n      // @private\n      _setError() {\n        this._request = null;\n        this._response = null;\n        this._responseHeaders = null;\n        this._responseParts = null;\n        return void 0;\n      }\n\n      // Parses a request URL string.\n\n      // @private\n      // This method is a thin wrapper around url.parse() that normalizes HTTP\n      // user/password credentials. It is used to parse the URL string passed to\n      // XMLHttpRequest#open() and the URLs in the Location headers of HTTP redirect\n      // responses.\n\n      // @param {String} urlString the URL to be parsed\n      // @return {Object} parsed URL\n      _parseUrl(urlString) {\n        var absoluteUrlString, index, password, user, xhrUrl;\n        if (this.nodejsBaseUrl === null) {\n          absoluteUrlString = urlString;\n        } else {\n          absoluteUrlString = url.resolve(this.nodejsBaseUrl, urlString);\n        }\n        xhrUrl = url.parse(absoluteUrlString, false, true);\n        xhrUrl.hash = null;\n        if (xhrUrl.auth && ((typeof user !== \"undefined\" && user !== null) || (typeof password !== \"undefined\" && password !== null))) {\n          index = xhrUrl.auth.indexOf(':');\n          if (index === -1) {\n            if (!user) {\n              user = xhrUrl.auth;\n            }\n          } else {\n            if (!user) {\n              user = xhrUrl.substring(0, index);\n            }\n            if (!password) {\n              password = xhrUrl.substring(index + 1);\n            }\n          }\n        }\n        if (user || password) {\n          xhrUrl.auth = `${user}:${password}`;\n        }\n        return xhrUrl;\n      }\n\n      // Reads the headers from a node.js ClientResponse instance.\n\n      // @private\n      // @param {http.ClientResponse} response the response whose headers will be\n      //   imported into this XMLHttpRequest's state\n      // @return {undefined} undefined\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method\n      // @see http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders()-method\n      _parseResponseHeaders(response) {\n        var loweredName, name, ref, value;\n        this._responseHeaders = {};\n        ref = response.headers;\n        for (name in ref) {\n          value = ref[name];\n          loweredName = name.toLowerCase();\n          if (this._privateHeaders[loweredName]) {\n            continue;\n          }\n          if (this._mimeOverride !== null && loweredName === 'content-type') {\n            value = this._mimeOverride;\n          }\n          this._responseHeaders[loweredName] = value;\n        }\n        if (this._mimeOverride !== null && !('content-type' in this._responseHeaders)) {\n          this._responseHeaders['content-type'] = this._mimeOverride;\n        }\n        return void 0;\n      }\n\n      // Sets the response and responseText properties when an XHR completes.\n\n      // @private\n      // @return {undefined} undefined\n      _parseResponse() {\n        var arrayBuffer, buffer, i, j, jsonError, ref, view;\n        if (Buffer.concat) {\n          buffer = Buffer.concat(this._responseParts);\n        } else {\n          // node 0.6\n          buffer = this._concatBuffers(this._responseParts);\n        }\n        this._responseParts = null;\n        switch (this.responseType) {\n          case 'text':\n            this._parseTextResponse(buffer);\n            break;\n          case 'json':\n            this.responseText = null;\n            try {\n              this.response = JSON.parse(buffer.toString('utf-8'));\n            } catch (error1) {\n              jsonError = error1;\n              this.response = null;\n            }\n            break;\n          case 'buffer':\n            this.responseText = null;\n            this.response = buffer;\n            break;\n          case 'arraybuffer':\n            this.responseText = null;\n            arrayBuffer = new ArrayBuffer(buffer.length);\n            view = new Uint8Array(arrayBuffer);\n            for (i = j = 0, ref = buffer.length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {\n              view[i] = buffer[i];\n            }\n            this.response = arrayBuffer;\n            break;\n          default:\n            // TODO(pwnall): content-base detection\n            this._parseTextResponse(buffer);\n        }\n        return void 0;\n      }\n\n      // Sets response and responseText for a 'text' response type.\n\n      // @private\n      // @param {Buffer} buffer the node.js Buffer containing the binary response\n      // @return {undefined} undefined\n      _parseTextResponse(buffer) {\n        var e;\n        try {\n          this.responseText = buffer.toString(this._parseResponseEncoding());\n        } catch (error1) {\n          e = error1;\n          // Unknown encoding.\n          this.responseText = buffer.toString('binary');\n        }\n        this.response = this.responseText;\n        return void 0;\n      }\n\n      // Figures out the string encoding of the XHR's response.\n\n      // This is called to determine the encoding when responseText is set.\n\n      // @private\n      // @return {String} a string encoding, e.g. 'utf-8'\n      _parseResponseEncoding() {\n        var contentType, encoding, match;\n        encoding = null;\n        if (contentType = this._responseHeaders['content-type']) {\n          if (match = /\\;\\s*charset\\=(.*)$/.exec(contentType)) {\n            return match[1];\n          }\n        }\n        return 'utf-8';\n      }\n\n      // Buffer.concat implementation for node 0.6.\n\n      // @private\n      // @param {Array<Buffer>} buffers the buffers whose contents will be merged\n      // @return {Buffer} same as Buffer.concat(buffers) in node 0.8 and above\n      _concatBuffers(buffers) {\n        var buffer, j, k, len, len1, length, target;\n        if (buffers.length === 0) {\n          return Buffer.alloc(0);\n        }\n        if (buffers.length === 1) {\n          return buffers[0];\n        }\n        length = 0;\n        for (j = 0, len = buffers.length; j < len; j++) {\n          buffer = buffers[j];\n          length += buffer.length;\n        }\n        target = Buffer.alloc(length);\n        length = 0;\n        for (k = 0, len1 = buffers.length; k < len1; k++) {\n          buffer = buffers[k];\n          buffer.copy(target, length);\n          length += buffer.length;\n        }\n        return target;\n      }\n\n    };\n\n    // @property {function(ProgressEvent)} DOM level 0-style handler for the\n    //   'readystatechange' event\n    XMLHttpRequest.prototype.onreadystatechange = null;\n\n    // @property {Number} the current state of the XHR object\n    // @see http://www.w3.org/TR/XMLHttpRequest/#states\n    XMLHttpRequest.prototype.readyState = null;\n\n    // @property {String, ArrayBuffer, Buffer, Object} processed XHR response\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-response-attribute\n    XMLHttpRequest.prototype.response = null;\n\n    // @property {String} response string, if responseType is '' or 'text'\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-responsetext-attribute\n    XMLHttpRequest.prototype.responseText = null;\n\n    // @property {String} sets the parsing method for the XHR response\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-responsetype-attribute\n    XMLHttpRequest.prototype.responseType = null;\n\n    // @property {Number} the HTTP\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-status-attribute\n    XMLHttpRequest.prototype.status = null;\n\n    // @property {Number} milliseconds to wait for the request to complete\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-timeout-attribute\n    XMLHttpRequest.prototype.timeout = null;\n\n    // @property {XMLHttpRequestUpload} the associated upload information\n    // @see http://www.w3.org/TR/XMLHttpRequest/#the-upload-attribute\n    XMLHttpRequest.prototype.upload = null;\n\n    // readyState value before XMLHttpRequest#open() is called\n    XMLHttpRequest.prototype.UNSENT = 0;\n\n    // readyState value before XMLHttpRequest#open() is called\n    XMLHttpRequest.UNSENT = 0;\n\n    // readyState value after XMLHttpRequest#open() is called, and before\n    //   XMLHttpRequest#send() is called; XMLHttpRequest#setRequestHeader() can be\n    //   called in this state\n    XMLHttpRequest.prototype.OPENED = 1;\n\n    // readyState value after XMLHttpRequest#open() is called, and before\n    //   XMLHttpRequest#send() is called; XMLHttpRequest#setRequestHeader() can be\n    //   called in this state\n    XMLHttpRequest.OPENED = 1;\n\n    // readyState value after redirects have been followed and the HTTP headers of\n    //   the final response have been received\n    XMLHttpRequest.prototype.HEADERS_RECEIVED = 2;\n\n    // readyState value after redirects have been followed and the HTTP headers of\n    //   the final response have been received\n    XMLHttpRequest.HEADERS_RECEIVED = 2;\n\n    // readyState value when the response entity body is being received\n    XMLHttpRequest.prototype.LOADING = 3;\n\n    // readyState value when the response entity body is being received\n    XMLHttpRequest.LOADING = 3;\n\n    // readyState value after the request has been completely processed\n    XMLHttpRequest.prototype.DONE = 4;\n\n    // readyState value after the request has been completely processed\n    XMLHttpRequest.DONE = 4;\n\n    // @property {http.Agent} the agent option passed to HTTP requests\n\n    // NOTE: this is not in the XMLHttpRequest API, and will not work in browsers.\n    // It is a stable node-xhr2 API that is useful for testing & going through\n    // web-proxies.\n    XMLHttpRequest.prototype.nodejsHttpAgent = http.globalAgent;\n\n    // @property {https.Agent} the agent option passed to HTTPS requests\n\n    // NOTE: this is not in the XMLHttpRequest API, and will not work in browsers.\n    // It is a stable node-xhr2 API that is useful for testing & going through\n    // web-proxies.\n    XMLHttpRequest.prototype.nodejsHttpsAgent = https.globalAgent;\n\n    // @property {String} the base URL that relative URLs get resolved to\n\n    // NOTE: this is not in the XMLHttpRequest API, and will not work in browsers.\n    // Its browser equivalent is the base URL of the document associated with the\n    // Window object. It is a stable node-xhr2 API provided for libraries such as\n    // Angular Universal.\n    XMLHttpRequest.prototype.nodejsBaseUrl = null;\n\n    // HTTP methods that are disallowed in the XHR spec.\n\n    // @private\n    // @see Step 6 in http://www.w3.org/TR/XMLHttpRequest/#the-open()-method\n    XMLHttpRequest.prototype._restrictedMethods = {\n      CONNECT: true,\n      TRACE: true,\n      TRACK: true\n    };\n\n    // HTTP request headers that are disallowed in the XHR spec.\n\n    // @private\n    // @see Step 5 in\n    //   http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader()-method\n    XMLHttpRequest.prototype._restrictedHeaders = {\n      'accept-charset': true,\n      'accept-encoding': true,\n      'access-control-request-headers': true,\n      'access-control-request-method': true,\n      connection: true,\n      'content-length': true,\n      cookie: true,\n      cookie2: true,\n      date: true,\n      dnt: true,\n      expect: true,\n      host: true,\n      'keep-alive': true,\n      origin: true,\n      referer: true,\n      te: true,\n      trailer: true,\n      'transfer-encoding': true,\n      upgrade: true,\n      via: true\n    };\n\n    // HTTP response headers that should not be exposed according to the XHR spec.\n\n    // @private\n    // @see Step 3 in\n    //     http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method\n    XMLHttpRequest.prototype._privateHeaders = {\n      'set-cookie': true,\n      'set-cookie2': true\n    };\n\n    // The default value of the User-Agent header.\n    XMLHttpRequest.prototype._userAgent = `Mozilla/5.0 (${os.type()} ${os.arch()}) ` + `node.js/${process.versions.node} v8/${process.versions.v8}`;\n\n    return XMLHttpRequest;\n\n  }).call(this);\n\n  // XMLHttpRequest is the result of require('node-xhr2').\n  module.exports = XMLHttpRequest;\n\n  // Make node-xhr2 work as a drop-in replacement for libraries that promote the\n  // following usage pattern:\n  //     var XMLHttpRequest = require('xhr-library-name').XMLHttpRequest\n  XMLHttpRequest.XMLHttpRequest = XMLHttpRequest;\n\n  // This file defines the custom errors used in the XMLHttpRequest specification.\n\n    // Thrown if the XHR security policy is violated.\n  SecurityError = class SecurityError extends Error {\n    // @private\n    constructor() {\n      super();\n    }\n\n  };\n\n  // Thrown if the XHR security policy is violated.\n  XMLHttpRequest.SecurityError = SecurityError;\n\n  // Usually thrown if the XHR is in the wrong readyState for an operation.\n  InvalidStateError = class InvalidStateError extends Error {\n    // @private\n    constructor() {\n      super();\n    }\n\n  };\n\n  // Usually thrown if the XHR is in the wrong readyState for an operation.\n  InvalidStateError = class InvalidStateError extends Error {};\n\n  XMLHttpRequest.InvalidStateError = InvalidStateError;\n\n  // Thrown if there is a problem with the URL passed to the XHR.\n  NetworkError = class NetworkError extends Error {\n    // @private\n    constructor() {\n      super();\n    }\n\n  };\n\n  // Thrown if parsing URLs errors out.\n  XMLHttpRequest.SyntaxError = SyntaxError;\n\n  SyntaxError = class SyntaxError extends Error {\n    // @private:\n    constructor() {\n      super();\n    }\n\n  };\n\n  ProgressEvent = (function() {\n    // http://xhr.spec.whatwg.org/#interface-progressevent\n    class ProgressEvent {\n      // Creates a new event.\n\n      // @param {String} type the event type, e.g. 'readystatechange'; must be\n      //   lowercased\n      constructor(type) {\n        this.type = type;\n        this.target = null;\n        this.currentTarget = null;\n        this.lengthComputable = false;\n        this.loaded = 0;\n        this.total = 0;\n      }\n\n    };\n\n    // Getting the time from the OS is expensive, skip on that for now.\n    // @timeStamp = Date.now()\n\n    // @property {Boolean} for compatibility with DOM events\n    ProgressEvent.prototype.bubbles = false;\n\n    // @property {Boolean} for fompatibility with DOM events\n    ProgressEvent.prototype.cancelable = false;\n\n    // @property {XMLHttpRequest} the request that caused this event\n    ProgressEvent.prototype.target = null;\n\n    // @property {Number} number of bytes that have already been downloaded or\n    //   uploaded\n    ProgressEvent.prototype.loaded = null;\n\n    // @property {Boolean} true if the Content-Length response header is available\n    //   and the value of the event's total property is meaningful\n    ProgressEvent.prototype.lengthComputable = null;\n\n    // @property {Number} number of bytes that will be downloaded or uploaded by\n    //   the request that fired the event\n    ProgressEvent.prototype.total = null;\n\n    return ProgressEvent;\n\n  }).call(this);\n\n  // The XHR spec exports the ProgressEvent constructor.\n  XMLHttpRequest.ProgressEvent = ProgressEvent;\n\n  // @see http://xhr.spec.whatwg.org/#interface-xmlhttprequest\n  XMLHttpRequestUpload = class XMLHttpRequestUpload extends XMLHttpRequestEventTarget {\n    // @private\n    // @param {XMLHttpRequest} the XMLHttpRequest that this upload object is\n    //   associated with\n    constructor(request) {\n      super();\n      this._request = request;\n      this._reset();\n    }\n\n    // Sets up this Upload to handle a new request.\n\n    // @private\n    // @return {undefined} undefined\n    _reset() {\n      this._contentType = null;\n      this._body = null;\n      return void 0;\n    }\n\n    // Implements the upload-related part of the send() XHR specification.\n\n    // @private\n    // @param {?String, ?Buffer, ?ArrayBufferView} data the argument passed to\n    //   XMLHttpRequest#send()\n    // @return {undefined} undefined\n    // @see step 4 of http://www.w3.org/TR/XMLHttpRequest/#the-send()-method\n    _setData(data) {\n      var body, i, j, k, offset, ref, ref1, view;\n      if (typeof data === 'undefined' || data === null) {\n        return;\n      }\n      if (typeof data === 'string') {\n        // DOMString\n        if (data.length !== 0) {\n          this._contentType = 'text/plain;charset=UTF-8';\n        }\n        this._body = Buffer.from(data, 'utf8');\n      } else if (Buffer.isBuffer(data)) {\n        // node.js Buffer\n        this._body = data;\n      } else if (data instanceof ArrayBuffer) {\n        // ArrayBuffer arguments were supported in an old revision of the spec.\n        body = Buffer.alloc(data.byteLength);\n        view = new Uint8Array(data);\n        for (i = j = 0, ref = data.byteLength; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {\n          body[i] = view[i];\n        }\n        this._body = body;\n      } else if (data.buffer && data.buffer instanceof ArrayBuffer) {\n        // ArrayBufferView\n        body = Buffer.alloc(data.byteLength);\n        offset = data.byteOffset;\n        view = new Uint8Array(data.buffer);\n        for (i = k = 0, ref1 = data.byteLength; (0 <= ref1 ? k < ref1 : k > ref1); i = 0 <= ref1 ? ++k : --k) {\n          body[i] = view[i + offset];\n        }\n        this._body = body;\n      } else {\n        // NOTE: diverging from the XHR specification of coercing everything else\n        //       to Strings via toString() because that behavior masks bugs and is\n        //       rarely useful\n        throw new Error(`Unsupported send() data ${data}`);\n      }\n      return void 0;\n    }\n\n    // Updates the HTTP headers right before the request is sent.\n\n    // This is used to set data-dependent headers such as Content-Length and\n    // Content-Type.\n\n    // @private\n    // @param {Object<String, String>} headers the HTTP headers to be sent\n    // @param {Object<String, String>} loweredHeaders maps lowercased HTTP header\n    //   names (e.g., 'content-type') to the actual names used in the headers\n    //   parameter (e.g., 'Content-Type')\n    // @return {undefined} undefined\n    _finalizeHeaders(headers, loweredHeaders) {\n      if (this._contentType) {\n        if (!('content-type' in loweredHeaders)) {\n          headers['Content-Type'] = this._contentType;\n        }\n      }\n      if (this._body) {\n        // Restricted headers can't be set by the user, no need to check\n        // loweredHeaders.\n        headers['Content-Length'] = this._body.length.toString();\n      }\n      return void 0;\n    }\n\n    // Starts sending the HTTP request data.\n\n    // @private\n    // @param {http.ClientRequest} request the HTTP request\n    // @return {undefined} undefined\n    _startUpload(request) {\n      if (this._body) {\n        request.write(this._body);\n      }\n      request.end();\n      return void 0;\n    }\n\n  };\n\n  // Export the XMLHttpRequestUpload constructor.\n  XMLHttpRequest.XMLHttpRequestUpload = XMLHttpRequestUpload;\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}