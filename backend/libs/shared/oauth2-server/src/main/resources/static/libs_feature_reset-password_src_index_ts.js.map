{"version":3,"file":"libs_feature_reset-password_src_index_ts.js","mappings":";;;;;;;;;;;;;;AAAoD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCgB;AACqB;AACV;AAC9B;AACO;AACb;AACP;AACgC;;;;;;;;;;;;;IAe1D,4EAAiD;IAAA,uDAA8C;IAAA,4DAAY;;;IAA1D,0DAA8C;IAA9C,yHAA8C;;;IAO/F,4EAAiD;IAAA,uDAA8C;IAAA,4DAAY;;;IAA1D,0DAA8C;IAA9C,yHAA8C;;AAalG,MAAM,wBAAwB;IAKnC,YAAoB,EAAe,EAAS,YAAuC,EAAU,KAAqB,EAC9F,KAAwB;QADxB,OAAE,GAAF,EAAE,CAAa;QAAS,iBAAY,GAAZ,YAAY,CAA2B;QAAU,UAAK,GAAL,KAAK,CAAgB;QAC9F,UAAK,GAAL,KAAK,CAAmB;QAH5C,oBAAe,GAAG,IAAI,yCAAO,EAAQ,CAAC;QAIpC,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC,KAAK,CAAC;YACnB,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,+DAAmB,EAAE,gEAAoB,CAAC,CAAC,CAAC,EAAE,gEAAoB,CAAC,EAAE,CAAC,CAAC,CAAC;YACxF,gBAAgB,EAAE,CAAC,EAAE,EAAE,CAAC,+DAAmB,EAAE,gEAAoB,CAAC,CAAC,CAAC,EAAE,gEAAoB,CAAC,EAAE,CAAC,CAAC,CAAC;SACjG,CAAC,CAAC;IACL,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CACtC,sDAAM,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,EAC7B,mDAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,EAC1B,yDAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAChC,CAAC;IACJ,CAAC;IAED,QAAQ;;QACN,UAAI,CAAC,KAAK,0CAAE,IAAI,CACd,mDAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,gCAAK,IAAI,CAAC,IAAI,CAAC,KAAK,KAAE,IAAI,GAAyB,EAAC,EACjE,yDAAS,CAAC,IAAI,CAAC,eAAe,CAAC,EAC/B,SAAS,CAAC,aAAa,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,sEAAqB,CAAC,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9F,CAAC;IAED,cAAc;;QACZ,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE;YACxC,OAAO,CAAC,WAAI,CAAC,IAAI,0CAAE,KAAK,KAAI,CAAC,CAAC,WAAI,CAAC,IAAI,0CAAE,KAAK,CAAC,QAAQ,OAAK,UAAI,CAAC,IAAI,0CAAE,KAAK,CAAC,gBAAgB,EAAC,CAAC;SAChG;aAAM;YACL,OAAO,IAAI,CAAC;SACb;IACH,CAAC;IAED,WAAW;QACT,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;QAC5B,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;IAClC,CAAC;;gGAvCU,wBAAwB;sHAAxB,wBAAwB;QA9BjC,yFAAwB;QACtB,0EAAiD;QAAxB,oJAAY,cAAU,IAAC;QAC9C,wEAA4D;QAC1D,0EAAmB;QAAA,wEAAa;QAAA,4DAAO;QACzC,4DAAK;QAEL,oFAAyD;QACvD,4EAAW;QAAA,mEAAQ;QAAA,4DAAY;QAC/B,sEAAkF;QAClF,8EAAoB;QAAA,oEAAQ;QAAA,4DAAW;QACvC,kIAA2G;QAC7G,4DAAiB;QAEjB,qFAAyD;QACvD,6EAAW;QAAA,oEAAQ;QAAA,4DAAY;QAC/B,uEAAmG;QACnG,+EAAoB;QAAA,oEAAQ;QAAA,4DAAW;QACvC,kIAA2G;QAC7G,4DAAiB;QAEjB,0EAAiD;QAC/C,6EAAkH;QAChH,oEACF;QAAA,4DAAS;QACX,4DAAM;QACR,4DAAO;QACT,4DAAyB;;;;QAzBjB,0DAAkB;QAAlB,+EAAkB;QASR,2DAAmC;QAAnC,uIAAmC;QAOnC,0DAAmC;QAAnC,uIAAmC;QAIqC,0DAA6B;QAA7B,0FAA6B;;;;;;;;;;;;;;;;;;;;;;;;;;ACjC5E;AACA;AACqC;AAC/B;AACI;AACS;AACX;AACE;AACE;;;AAmBpD,MAAM,0BAA0B;;oGAA1B,0BAA0B;uHAA1B,0BAA0B;2HAhB5B;YACP,yDAAY;YACZ,kEAAqB,CAAC;gBACpB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS,EAAE,6FAAwB,EAAE;aACrE,CAAC;YACF,+DAAmB;YACnB,mEAAkB;YAClB,4EAAkB;YAClB,iEAAa;YACb,qEAAe;YACf,mEAAc;SACf;mIAKU,0BAA0B,mBAHnC,6FAAwB,aAZxB,yDAAY,6DAIZ,+DAAmB;QACnB,mEAAkB;QAClB,4EAAkB;QAClB,iEAAa;QACb,qEAAe;QACf,mEAAc","sources":["./libs/feature/reset-password/src/index.ts","./libs/feature/reset-password/src/lib/containers/reset-password-cn.component.ts","./libs/feature/reset-password/src/lib/feature-reset-password.module.ts"],"sourcesContent":["export * from './lib/feature-reset-password.module';\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { SharedUtilAuthService, SharedUtilFormUtilService } from '@frontend/shared/util';\nimport { IUserRegistration, IUserResetPassword } from '@frontend/shared/model';\nimport { ActivatedRoute } from '@angular/router';\nimport { filter, map, takeUntil } from 'rxjs/operators';\nimport { Observable, Subject } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport { IUserState, RESET_PASSWORD_ACTION } from '@frontend/state';\n\n@Component({\n  selector: 'frontend-reset-passoword-cn',\n  template: `\n    <frontend-login-form-cn>\n      <form [formGroup]='form' (ngSubmit)='onSubmit()'>\n        <h1 class='col-12 fs-1 text-opacity-50 text-primary bi-key'>\n          <span class='ms-2'>Rest Password</span>\n        </h1>\n\n        <mat-form-field appearance='outline' class='col-12 mt-3'>\n          <mat-label>Password</mat-label>\n          <input matInput type='password' placeholder='Password' formControlName='password'>\n          <mat-icon matSuffix>password</mat-icon>\n          <mat-error *ngIf=\"form.get('password')?.invalid\">{{fUtilService.getPasswordErrorMessage(form)}}</mat-error>\n        </mat-form-field>\n\n        <mat-form-field appearance='outline' class='col-12 mt-3'>\n          <mat-label>Password</mat-label>\n          <input matInput type='password' placeholder='Password Repeated' formControlName='passwordRepeated'>\n          <mat-icon matSuffix>password</mat-icon>\n          <mat-error *ngIf=\"form.get('password')?.invalid\">{{fUtilService.getPasswordErrorMessage(form)}}</mat-error>\n        </mat-form-field>\n\n        <div class='row col-12 mt-3 justify-content-end'>\n          <button mat-raised-button color='primary' class='col-6 col-lg-3 ms-1' type='submit' [disabled]='isFormNotValid()'>\n            Submit\n          </button>\n        </div>\n      </form>\n    </frontend-login-form-cn>\n  `,\n  styles: []\n})\nexport class ResetPasswordCnComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  code$: Observable<string> | undefined;\n  subscribeUntil$ = new Subject<void>();\n\n  constructor(private fb: FormBuilder, public fUtilService: SharedUtilFormUtilService, private route: ActivatedRoute,\n              private store: Store<IUserState>) {\n    this.form = fb.group({\n      password: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(12)]],\n      passwordRepeated: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(12)]]\n    });\n  }\n\n  ngOnInit(): void {\n    this.code$ = this.route.queryParams.pipe(\n      filter(params => params.code),\n      map(params => params.code),\n      takeUntil(this.subscribeUntil$)\n    );\n  }\n\n  onSubmit() {\n    this.code$?.pipe(\n      map(code => ({ ...this.form.value, code } as IUserResetPassword)),\n      takeUntil(this.subscribeUntil$)\n    ).subscribe(resetPassword => this.store.dispatch(RESET_PASSWORD_ACTION({ resetPassword })));\n  }\n\n  isFormNotValid() {\n    if (this.form.value.password.length >= 6) {\n      return !this.form?.valid || !(this.form?.value.password === this.form?.value.passwordRepeated);\n    } else {\n      return true;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscribeUntil$.next();\n    this.subscribeUntil$.complete();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ResetPasswordCnComponent } from './containers/reset-password-cn.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { SharedUiFormModule } from '@frontend/shared/ui';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      { path: '', pathMatch: 'full', component: ResetPasswordCnComponent }\n    ]),\n    ReactiveFormsModule,\n    SharedUiFormModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatButtonModule,\n    MatInputModule\n  ],\n  declarations: [\n    ResetPasswordCnComponent\n  ],\n})\nexport class FeatureResetPasswordModule {}\n"],"names":[],"sourceRoot":"webpack:///"}